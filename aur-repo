#!/bin/bash

# aur-repo - keep your local repo with packages from AUR up to date
# Version: 0.0.1
# Author: Thorsten Toepper <atsutane at freethoughts dot de>
# 		Inspired and partly based on work by Stefan Husmann and Michal Krenek
# 		Tried to write it to be compatible with autoaur.

# Options:
AURURL="http://aur.archlinux.org/packages"
REBUILD=0
LOCALVER=0
LOCALREL=1
AURVER=0
AURREL=1
DOWNLOADER="wget" # or "curl"

log() {
    echo $@
    echo "`date +%Y%m%d`: $@" >> ${REPOPATH}/${PERSREPO}.log
}

exp_path() {
    echo "`cd $1; pwd`";
}

# Functions
download() {
    if [ "$DOWNLOADER" = "wget" ]; then
        wget -q "${AURURL}/${PACKAGE}/${PACKAGE}.tar.gz" -O ".cache/${PACKAGE}.tar.gz"
    elif [ "$DOWNLOADER" = "curl" ]; then
        curl "${AURURL}/${PACKAGE}/${PACKAGE}.tar.gz" > ".cache/${PACKAGE}.tar.gz"
    else
        echo "no download program specified"
        exit 1
    fi
    if [ $? -ne 0 ]; then
        log "Can't download '${PACKAGE}.tar.gz'. Skipping this package..."
    fi
}

get_pkgver() {
    grep "^pkgver=" "$1" | cut -d'=' -f2
}

get_pkgrel() {
    grep "^pkgrel=" "$1" | cut -d'=' -f2
}

diff_pkg() {
    cd ${REPOPATH}/.cache
    tar -xf ${PACKAGE}.tar.gz

    LOCALVER=`get_pkgver ${REPOPATH}/build/${PACKAGE}/PKGBUILD`
    AURVER=`get_pkgver ${PACKAGE}/PKGBUILD`

    LOCALREL=`get_pkgrel ${REPOPATH}/build/${PACKAGE}/PKGBUILD`
    AURREL=`get_pkgrel ${PACKAGE}/PKGBUILD`

    if [ $REBUILD -eq 1 ]; then
        rm "${REPOPATH}/build/${PACKAGE}/PKGBUILD"
    elif [ -f "${REPOPATH}/build/${PACKAGE}/PKGBUILD" ]; then
        VERCMP=`vercmp "$AURVER" "$LOCALVER"`
        if [ $VERCMP -gt 0 ]; then
            REBUILD=1
        elif [ $VERCMP -eq 0 ]; then
            VERCMP=`vercmp "$AURREL" "$LOCALREL"`
            if  [ $VERCMP -gt 0 ]; then
                REBUILD=1
            else
                REBUILD=0
            fi
        fi
    else
        REBUILD=1
    fi

    # Put into log
    if [ $REBUILD -eq 0 ]; then
        log "$PACKAGE is up to date."
    else
        install -Dm644 ${PACKAGE}/PKGBUILD ${REPOPATH}/build/${PACKAGE}/PKGBUILD || exit 1
        cp -r ${PACKAGE} ${REPOPATH}/build/
        log "$PACKAGE will be updated. ($LOCALVER-$LOCALREL -> $AURVER-$AURREL)"
    fi

    cd $REPOPATH
}

build() {
    if [ "$1" != "nodiff" ]; then
        diff_pkg
    fi

    if [ $REBUILD -eq 1 ]; then
        repo-remove ${REPOPATH}/${PERSREPO}.db.tar.gz $PACKAGE
        rm -f ${PACKAGE}-*.pkg.tar.*

        if [ -d "${REPOPATH}/build/${PACKAGE}" ]; then
            cd ${REPOPATH}/build/${PACKAGE}
            makepkg -f
            if [ -f *.pkg.tar.* ]; then
                mv *.pkg.tar.* $REPOPATH/
            fi
        else
            echo "Package not found...skipping"
        fi
    fi

    cd $REPOPATH
}

get_data() {
    # " =" to avoid misuse using the url tag.
    pkgver=`grep "^pkgver =" build/${PACKAGE}/pkg/.PKGINFO | cut -d "=" -f 2|cut -d " " -f 2`
    CARCH=`grep "^arch =" build/${PACKAGE}/pkg/.PKGINFO | cut -d "=" -f 2|cut -d " " -f 2`
}

show_help() {
	cat << EOF
Usage: $(basename $0) [REPOPATH]
       $(basename $0) -b <package> [REPOPATH]

Config file example:

PERSREPO=my
GET_FROM_AUR=(
	package1=a
	package2=m
	package3=n
)

Options:
	a ... build always a new package
	m ... only build a new package if the PKGBUILD in AUR changed
	n ... ignore package (useful if the package at AUR is currently broken)
EOF
}


if [ "$1" = "-h" ]; then
    show_help
    exit 1
fi

BUILD_ONE=0
if [ "$1" = "-b" ]; then
    if [ -n "$2" ]; then
        PACKAGE=$2
        BUILD_ONE=1
        shift 2
    else
        show_help
        exit 1
    fi
fi

if [ -z "$1" ]; then
    REPOPATH=$PWD
else
    REPOPATH=$(exp_path $1)
fi
echo "---> $REPOPATH"

# Check given path and show help
if [ ! -f "${REPOPATH}/repo.conf" ]; then
    show_help
    exit 1
fi

cd $REPOPATH
if [ $? -eq 1 ]; then
    exit 1
fi

if [ ! -d ".cache" ]; then
    mkdir ".cache"
fi

if [ ! -d "build" ]; then
    mkdir "build"
fi

# Include the configuration
source repo.conf

if [ $BUILD_ONE -eq 1 ]; then
    NO_DOWNLOAD=1
    if [ ! -d "$REPOPATH/build/$PACKAGE" ]; then
        NO_DOWNLOAD=0
        download
        cd ${REPOPATH}/.cache
        tar -xf ${PACKAGE}.tar.gz
        cp -r "${PACKAGE}" "${REPOPATH}/build/"
        cd "${REPOPATH}"
    fi
    
    if [ ! -d "$REPOPATH/build/$PACKAGE" ]; then
        echo "Package not found...skipping."
        exit 1
    fi

    REBUILD=1
    build nodiff
    get_data
    repo-add $REPOPATH/$PERSREPO.db.tar.gz $PACKAGE-$pkgver-$CARCH.pkg.tar.gz

    exit 0
fi

if [ ${#GET_FROM_AUR[@]} -eq 0 ]; then
    echo "Error in configuration or no packages specified."
    exit 1
fi


# Download package, check option, build it and add it to repository
for ITEM in "${GET_FROM_AUR[@]}"; do
    PACKAGE=$(echo $ITEM | cut -d "=" -f 1)
    PACKAGE_ACTION=$(echo $ITEM | cut -d "=" -f 2)
    REBUILD=0

    case $PACKAGE_ACTION in
        a)
        download
        REBUILD=1
        build
        get_data
        repo-add $REPOPATH/$PERSREPO.db.tar.gz $PACKAGE-$pkgver-$CARCH.pkg.tar.gz
        ;;
        m)
        download
        build
        if [ $REBUILD -eq 1 ]; then
            get_data
            rm -rf build/${PACKAGE}/{src,pkg}
            repo-add $REPOPATH/$PERSREPO.db.tar.gz $PACKAGE-$pkgver-$CARCH.pkg.tar.gz
        fi
        ;;
        *)
        echo "$PACKAGE will be ignored."
        ;;
    esac
done

#rm -rf .cache/*
