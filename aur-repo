#!/bin/bash

# aur-repo - keep your local repo with packages from AUR up to date
# Version: 0.0.1
# Author: Thorsten Toepper <atsutane at freethoughts dot de>
# 		Inspired and partly based on work by Stefan Husmann and Michal Krenek
# 		Tried to write it to be compatible with autoaur.

# Options:

DOWNLOADER=""

# Functions
check_downloader() {
#	if [ -x "/usr/bin/wget" ]; then
#		DOWNLOADER=wget
#	elif
	if [ -x "/usr/bin/curl" ]; then
		DOWNLOADER=curl
	else
	#	echo "Neither wget nor curl found."
		echo "Could not find curl."
		exit 1
	fi
}

download() {
	check_downloader

	if [ ! -d ".cache" ]; then
			mkdir .cache
	fi

#	if [ $DOWNLOADER == wget ]; then
#		wget -o .cache/${PACKAGE}.tar.gz http://aur.archlinux.org/packages/${PACKAGE}/${PACKAGE}.tar.gz
#	else
		curl http://aur.archlinux.org/packages/${PACKAGE}/${PACKAGE}.tar.gz > .cache/${PACKAGE}.tar.gz
#	fi
}

diff_pkg() {
	cd .cache
	tar -xf ${PACKAGE}.tar.gz
	if [ -f ../build/${PACKAGE}/PKGBUILD ]; then
		if [ `cat $PACKAGE/PKGBUILD|grep pkgver|cut -d "=" -f 2` -lt `cat ../build/$PACKAGE/PKGBUILD|grep pkgver|cut -d "=" -f 2` ]; then
			if  [ `cat $PACKAGE/PKGBUILD|grep pkgrel|cut -d "=" -f 2` -lt `cat ../build/$PACKAGE/PKGBUILD|grep pkgrel|cut -d "=" -f 2` ]; then
				rm -rf *
			else
				mv $PACKAGE ../build/
				REBUILD=1
			fi
		else
			mv $PACKAGE ../build/
			REBUILD=1
		fi
	else
		mv $PACKAGE ../build/
		REBUILD=1
	fi

	cd $REPOPATH
}

build() {
	if [ ! -d build ]; then
		mkdir build
	fi
	
	diff_pkg
	if [ $REBUILD = 1 ]; then
		repo-remove $REPOPATH/${PERSREPO}.db.tar.gz $PACKAGE
		rm -f ${PACKAGE}-*.pkg.tar.*

		cd build/${PACKAGE}
		makepkg -f
		if [ -f *.pkg.tar.* ]; then
			mv *.pkg.tar.* $REPOPATH/
		fi
	fi

	cd $REPOPATH
}

get_data() {
	# " =" to avoid misuse using the url tag.
	pkgver=`cat build/${PACKAGE}/pkg/.PKGINFO|grep "pkgver ="| cut -d "=" -f 2|cut -d " " -f 2`
	CARCH=`cat build/${PACKAGE}/pkg/.PKGINFO|grep "arch =" | cut -d "=" -f 2|cut -d " " -f 2`
}

show_help() {
	cat << EOF
Usage: $0 REPOPATH

Config file example:

PERSREPO=my
GET_FROM_AUR=(
				package1=a
				package2=m
				package3=n
			)

Options:
	a ... build always a new package
	m ... only build a new package if the PKGBUILD in AUR changed
	n ... ignore package (useful if the package at AUR is currently broken)
EOF
}

# Check given path and show help
if [ ! -f "${1}/repo.conf" ]; then
	show_help
	exit 1
fi

REPOPATH=$1
cd $REPOPATH
if [ $? = 1 ]; then
	exit 1
fi

# Include the configuration
source repo.conf

if [ ${#GET_FROM_AUR[@]} -eq 0 ]; then
	echo "Error in configuration or no packages specified."
	exit 1
fi

# Download package, check option, build it and add it to repository
for ITEM in "${GET_FROM_AUR[@]}"; do
	PACKAGE=$(echo $ITEM | cut -d "=" -f 1)
	PACKAGE_ACTION=$(echo $ITEM | cut -d "=" -f 2)

	case $PACKAGE_ACTION in
		a) download
		REBUILD=1
		build
		get_data
		repo-add $REPOPATH/$PERSREPO.db.tar.gz $PACKAGE-$pkgver-$CARCH.pkg.tar.gz
		;;
		m) download
		REBUILD=0
		build
		get_data
		rm -rf build/${PACKAGE}/{src,pkg}
		repo-add $REPOPATH/$PERSREPO.db.tar.gz $PACKAGE-$pkgver-$CARCH.pkg.tar.gz
		;;
		*)echo "$PACKAGE will be ignored."
		;;
	esac
done

rm -rf .cache/*
