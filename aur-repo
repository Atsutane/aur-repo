#!/bin/bash
# aur-repo - keep your local repo with packages from AUR up to date
# Version : 1.0.0
# Author  : Jan-Erik Rediger (badboy_) <badboy at archlinux dot us>
# URL     : https://github.com/badboy/aur-repo/tree/ctdo
#
#        Based on work by Thorsten Toepper, who initially create aur-repo.
#        Thorsten's version was inspired and partly based on work by
#        Stefan Husmann and Michal Krenek
VERSION=1.0.0

AURURL="http://aur.archlinux.org/packages"
REBUILD=0
AURGET="aurget"
DBEXT=".db.tar.gz"

if [ ! `grep PKGEXT ~/.makepkg.conf` = "" ]; then
	PKGEXT=`grep PKGEXT ~/.makepkg.conf |sed s/PKGEXT=// | sed s/\'//g`
else
	PKGEXT=`grep PKGEXT /etc/makepkg.conf |sed s/PKGEXT=// | sed s/\'//g`
fi


BUILDDIR="${BUILDDIR:-/build}"
PACKAGEDIR="${PACKAGEDIR:-/packages}"
LOGFILE="" # set in setup
REPOCONF="${BUILDDIR}/repo.conf"
DRY_RUN=0
QUIET=0

log() {
    [ ${QUIET} -eq 0 ] && echo $@
    [ ${DRY_RUN} -eq 0 ] && echo "[`date +'%Y-%m-%d %H:%M'`]: $@" >> "${LOGFILE}"
}

die() {
    log $@
    exit 1
}

expand_path() {
    local cwd="$(pwd)"
    cd "$1"
    pwd
    cd "$cwd"
}

shell_run() {
    if [ ${DRY_RUN} -eq 0 ]; then
        $@
    else
        echo "DRYRUN: $@"
    fi
}

reporemove() {
    if [ -f "${PACKAGEDIR}/${REPONAME}${DBEXT}" ]; then
        shell_run repo-remove "${PACKAGEDIR}/${REPONAME}${DBEXT}" "${1}"
    fi
}

repoadd() {
    shell_run repo-add "${PACKAGEDIR}/${REPONAME}${DBEXT}" "${1}"
}

download() {
    wget -qO "${BUILDDIR}/.cache/${PACKAGE}.tar.gz" "${AURURL}/${PACKAGE}/${PACKAGE}.tar.gz"
    if [ $? -ne 0 ]; then
        log "Can't download '${PACKAGE}.tar.gz'. Skipping this package..."
        rm -f "${BUILDDIR}/.cache/${PACKAGE}.tar.gz"
        return 1
    fi
    cd "${BUILDDIR}/.cache"
    tar -xf "${BUILDDIR}/.cache/${PACKAGE}.tar.gz"
    return 0
}

get_pkgver() {
    if [ -f "${1}" ]; then
        grep "^pkgver=" "${1}" | cut -d'=' -f2 | sed "s#['\"]##g"
    else
        echo 0
    fi
}

get_pkgrel() {
    if [ -f "${1}" ]; then
        grep "^pkgrel=" "${1}" | cut -d'=' -f2 | sed "s#['\"]##g"
    else
        echo 0
    fi
}

diff_pkg() {
    local aurver=`get_pkgver "${BUILDDIR}/.cache/${PACKAGE}/PKGBUILD"`
    local aurrel=`get_pkgrel "${BUILDDIR}/.cache/${PACKAGE}/PKGBUILD"`
    if [ `find "${PACKAGEDIR}" -type f -name "${PACKAGE}-*${PKGEXT}" | wc -l` -ne 0 ]; then
        local localver=`get_pkgver "${BUILDDIR}/${PACKAGE}/PKGBUILD"`
        local localrel=`get_pkgrel "${BUILDDIR}/${PACKAGE}/PKGBUILD"`

        if [ ${REBUILD} -eq 1 ]; then
            rm "${BUILDDIR}/${PACKAGE}/PKGBUILD"
        elif [ -f "${BUILDDIR}/${PACKAGE}/PKGBUILD" ]; then
            local vercmp=`vercmp "${aurver}" "${localver}"`
            if [ ${vercmp} -gt 0 ]; then
                REBUILD=1
            elif [ ${vercmp} -eq 0 ]; then
                local vercmp=`vercmp "${aurrel}" "${localrel}"`
                if  [ ${vercmp} -gt 0 ]; then
                    REBUILD=1
                else
                    REBUILD=0
                fi
            fi
        else
            REBUILD=1
        fi
    else
        local localver=nil
        local localrel=nil
        REBUILD=1
    fi

    # Put into log
    if [ ${REBUILD} -eq 0 ]; then
        log "${PACKAGE} is up to date."
    else
        shell_run cp -r "${BUILDDIR}/.cache/${PACKAGE}" "${BUILDDIR}/"
        log "${PACKAGE} will be updated. (${localver}-${localrel} -> ${aurver}-${aurrel})"
    fi

    cd ${BUILDDIR}
}

build() {
    if [ "${1}" != "nodiff" ]; then
        diff_pkg
    fi

    if [ ${REBUILD} -eq 1 ]; then
        reporemove "${PACKAGE}"
        shell_run find "${PACKAGEDIR}" -type f -name "${PACKAGE}-*${PKGEXT}" -delete

        if [ -d "${BUILDDIR}/${PACKAGE}" ]; then
            cd "${BUILDDIR}/${PACKAGE}"
            shell_run find  . -type f -iname "${PACKAGE}-*${PKGEXT}" -delete
            shell_run makepkg -f $MAKEPKG_EXTRA_ARGS
            if [ $? -ne 0 ]; then
                log "(${PACKAGE}) Package build failed...skipping"
                REBUILD=0
            fi
            find . -iname "*${PKGEXT}" -exec cp {} "${PACKAGEDIR}/" \;
        else
            log "(${PACKAGE}) Package not found...skipping"
            REBUILD=0
        fi
    fi

    cd "${PACKAGEDIR}"
}

get_data() {
    if [ -f "${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO" ]; then
        # " =" to avoid misuse using the url tag.
        PKGVER=`grep "^pkgver =" "${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO" | cut -d "=" -f 2|cut -d " " -f 2`
        CARCH=`grep "^arch =" "${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO" | cut -d "=" -f 2|cut -d " " -f 2`
        return 0
    else
        return 1
    fi
}

show_help() {
cat << EOF
Usage: $(basename ${0}) [-hnqv] [command] [options]

  -h : Show this help and exit.
  -n : Dry run. Show executed commands but don't run them.
  -q : Be quiet. Do not print any message (but log them to the logfile).
  -v : Show version.

Commands:
  update                    Update the whole repository.
  update package            Force update of the specified package
  add package [mode]        Add new package to the list, 'mode' is the same as
                            in the config file and defaults to 'm'.
  addbuild package [mode]   Same as above plus building the package right away.
  remove package            Remove package from repository and delete all source files.
  info                      Show some info about the repository.
  list                      List all current packages in the repository database.

Config file example:

  REPONAME=my-repo
  GET_FROM_AUR=(
    package1=a
    package2=m
    package3=n
  )

Options:
a ... build always a new package
m ... only build a new package if the PKGBUILD in AUR changed
n ... ignore package (useful if the package at AUR is currently broken)
EOF
}

show_version() {
    cat <<EOF
$(basename ${0}) v${VERSION} Â© 2011 Jan-Erik Rediger
  more at https://github.com/badboy/aur-repo/tree/ctdo
EOF
}

setup() {
    # Check given path and show help
    if [ ! -f "${REPOCONF}" ]; then
        echo "No config found."
        echo "Use $(basename ${0}) -h for more help."
        exit 1
    fi

    # Include the configuration
    source "${REPOCONF}"

    cd "${BUILDDIR}"
    if [ $? -eq 1 ]; then
        die "Can't find build dir: ${BUILDDIR}"
    fi
    LOGFILE="${BUILDDIR}/${REPONAME}.log"
    log "---> using ${REPOCONF}"
    log "---> Repo: ${REPONAME}"
    log "---> Command: ${1}"

    if [ ! -d "${BUILDDIR}/.cache" ]; then
        mkdir "${BUILDDIR}/.cache"
    fi
}

update_one() {
    PACKAGE="${1}"
    BUILD_ONE=1
    log "---> Update '${PACKAGE}'"

    NO_DOWNLOAD=1
    if [ ! -d "${BUILDDIR}/${PACKAGE}" ]; then
        NO_DOWNLOAD=0
        if download; then
            shell_run cp -r "${BUILDDIR}/.cache/${PACKAGE}" "${BUILDDIR}/"
        else
            die "Download failed. Nothig to work on."
        fi
    fi

    if [ ! -d "${BUILDDIR}/${PACKAGE}" ]; then
        die "(${PACKAGE}) Package not found...skipping."
    fi

    REBUILD=1
    build nodiff
    get_data
    if [ $? -eq 0 ]; then
        repoadd "${PACKAGE}-${PKGVER}-${CARCH}${PKGEXT}"
    fi

    log "---> update finished."
}

update_all() {
    log "---> full update"

    if [ ${#GET_FROM_AUR[@]} -eq 0 ]; then
        die "Error in configuration or no packages specified."
    fi

    # Download package, check option, build it and add it to repository
    for item in "${GET_FROM_AUR[@]}"; do
        PACKAGE=$(echo "${item}" | cut -d "=" -f 1)
        local package_action=$(echo "${item}" | cut -d "=" -f 2)
        REBUILD=0

        case ${package_action} in
            a)
                if ! download; then
                    continue
                fi
                REBUILD=1
                build
                get_data
                if [ $? -eq 0 ]; then
                    shell_run repoadd ${PACKAGE}-${PKGVER}-${CARCH}${PKGEXT}
                    # clean up build dir (in -git packages)
                    if [ -d "${BUILDDIR}/${PACKAGE}/src/*-build" ]; then
                        rm -rf ${BUILDDIR}/${PACKAGE}/src/*-build
                    fi
                fi
                ;;
            m)
                if ! download; then
                    continue
                fi
                build
                if [ ${REBUILD} -eq 1 ]; then
                    get_data
                    if [ $? -eq 0 ]; then
                        rm -rf ${BUILDDIR}/${PACKAGE}/{src,pkg}
                        shell_run repoadd ${PACKAGE}-${PKGVER}-${CARCH}${PKGEXT}
                    fi
                fi
                ;;
            *)
                log "${PACKAGE} will be ignored."
                ;;
        esac
    done
    log "---> full update finished."
}

add_package() {
    if [ -z "${1}" ]; then
        die "Please give a package name and optional a new mode."
    fi
    local new_package=${1}

    if [ -n "${2}" ]; then
        if [ ${2} != "m" ] && [ ${2} != "n" ] && [ ${2} != "a" ]; then
            die "Please choose a correct mode: a=always, m=modified, n=never"
        fi
        local new_mode=${2}
    else
        local new_mode=m
    fi

    for item in "${GET_FROM_AUR[@]}"; do
        local package=$(echo ${item} | cut -d "=" -f 1)
        local package_action=$(echo ${item} | cut -d "=" -f 2)

        if [ "${package}" = "${new_package}" ]; then
            die "The specified package is already in your list. Please change mode manually."
        fi
    done

    (
        echo "REPONAME=${REPONAME}"
        echo "GET_FROM_AUR=("
        for item in "${GET_FROM_AUR[@]}"; do
            local package=$(echo ${item} | cut -d "=" -f 1)
            local package_action=$(echo ${item} | cut -d "=" -f 2)
            echo "    ${item}"
        done
        echo "    ${new_package}=${new_mode}"
        echo ")"
    ) > "${REPOCONF}"
    log "---> Added ${new_package} to ${REPOCONF}"

}

remove_package() {
    if [ -z "${1}" ]; then
        die "Please give a package name and optional a new mode."
    fi
    local rm_package="${1}"

    reporemove "${rm_package}"
    shell_run rm -rf "${BUILDDIR}/${rm_package}"
    shell_run rm -rf "${BUILDDIR}/.cache/${rm_package}"
    shell_run rm -rf "${BUILDDIR}/.cache/${rm_package}${PKGEXT}"
    shell_run find "${PACKAGEDIR}" -type f -name "${rm_package}-*${PKGEXT}" -delete

    (
        echo "REPONAME=${REPONAME}"
        echo "GET_FROM_AUR=("
        for item in "${GET_FROM_AUR[@]}"; do
            local package=$(echo ${item} | cut -d "=" -f 1)
            local package_action=$(echo ${item} | cut -d "=" -f 2)

            if [ "${package}" != "${rm_package}" ]; then
                echo "    ${item}"
            fi
        done
        echo ")"
    ) > "${REPOCONF}"
    log "---> Removed ${rm_package} from ${REPOCONF}"
}

list_packages() {
    if [ -f "${PACKAGEDIR}/${REPONAME}${DBEXT}" ]; then
        tar -atf "${PACKAGEDIR}/${REPONAME}${DBEXT}" | sed 's#/.\+\?##' | uniq
    else
        die "Repository database file not found. Please add packages first."
    fi
}

show_info() {
    echo "Config          : ${REPOCONF}"
    echo "Logfile         : ${LOGFILE}"
    echo "Repository      : ${REPONAME}"
    echo "Builddir        : ${BUILDDIR}"
    echo "Packagedir      : ${PACKAGEDIR}"
    echo "No. of packages : ${#GET_FROM_AUR[@]}"
}

if [ "${1}" = "-n" ]; then
    DRY_RUN=1
    log "---> DRYRUN!"
    shift
fi

if [ "${1}" = "-q" ]; then
    QUIET=1
    shift
fi


case "${1}" in
    add)
        setup "${1}"
        shift
        add_package ${@}
        ;;
    addbuild)
        setup "${1}"
        shift
        add_package ${@}
        update_one "${1}"
        ;;
    update|build)
        setup "${1}"
        shift
        if [ -z "${1}" ]; then
            update_all
        else
            update_one "${1}"
        fi
        ;;
    remove)
        setup "${1}"
        shift
        remove_package "${1}"
        ;;
    list)
        setup "${1}"
        list_packages
        ;;
    info)
        setup "${1}"
        show_info
        ;;
    -h|help)
        show_help
        ;;
    -v|--version|version)
        show_version
        ;;
    *)
        show_help
        ;;
esac

exit 0
