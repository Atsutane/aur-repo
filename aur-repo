#!/bin/bash
# aur-repo - keep your local repo with packages from AUR up to date
# Version : 0.0.2dev
# Author  : Jan-Erik Rediger (badboy_) <badboy at archlinux dot us>
# URL     : https://github.com/badboy/aur-repo
#
#        Based on work by Thorsten Toepper, who initially create aur-repo.
#        Thorsten's version was inspired and partly based on work by 
#        Stefan Husmann and Michal Krenek

# Options:
AURURL="http://aur.archlinux.org/packages"
REBUILD=0
LOCALVER=0
LOCALREL=1
AURVER=0
AURREL=1
AURGET="aurget"
DBEXT=".db.tar.gz"

BUILDDIR="${BUILDDIR:-/build}"
PACKAGEDIR="${PACKAGEDIR:-/packages}"
REPOCONF="${BUILDDIR}/repo.conf"

log() {
    echo $@
    echo "`date +%Y%m%d`: $@" >> ${BUILDDIR}/${REPONAME}.log
}

die() {
    log $@
    exit 1
}

exp_path() {
    echo "`cd ${1}; pwd`";
}

# Functions
download() {
    curl -s "${AURURL}/${PACKAGE}/${PACKAGE}.tar.gz" > "${BUILDDIR}/.cache/${PACKAGE}.tar.gz"
    if [ $? -ne 0 ]; then
        log "Can't download '${PACKAGE}.tar.gz'. Skipping this package..."
    fi
    cd ${BUILDDIR}/.cache
    tar -xf ${BUILDDIR}/.cache/${PACKAGE}.tar.gz
}

get_pkgver() {
    if [ -f "${1}" ]; then
        grep "^pkgver=" "${1}" | cut -d'=' -f2
    else
        echo 0
    fi
}

get_pkgrel() {
    if [ -f "${1}" ]; then
        grep "^pkgrel=" "${1}" | cut -d'=' -f2
    else
        echo 0
    fi
}

diff_pkg() {
    if [ -f ${PACKAGEDIR}/${PACKAGE}*${PKGEXT} ]; then

        LOCALVER=`get_pkgver ${BUILDDIR}/${PACKAGE}/PKGBUILD`
        AURVER=`get_pkgver ${BUILDDIR}/.cache/${PACKAGE}/PKGBUILD`

        LOCALREL=`get_pkgrel ${BUILDDIR}/${PACKAGE}/PKGBUILD`
        AURREL=`get_pkgrel ${BUILDDIR}/.cache/${PACKAGE}/PKGBUILD`

        if [ ${REBUILD} -eq 1 ]; then
            rm "${BUILDDIR}/${PACKAGE}/PKGBUILD"
        elif [ -f "${BUILDDIR}/${PACKAGE}/PKGBUILD" ]; then
            VERCMP=`vercmp "${AURVER}" "${LOCALVER}"`
            if [ ${VERCMP} -gt 0 ]; then
                REBUILD=1
            elif [ ${VERCMP} -eq 0 ]; then
                VERCMP=`vercmp "${AURREL}" "${LOCALREL}"`
                if  [ ${VERCMP} -gt 0 ]; then
                    REBUILD=1
                else
                    REBUILD=0
                fi
            fi
        else
            REBUILD=1
        fi
    else
        REBUILD=1
    fi

    # Put into log
    if [ ${REBUILD} -eq 0 ]; then
        log "${PACKAGE} is up to date."
    else
        cp -r ${BUILDDIR}/.cache/${PACKAGE} ${BUILDDIR}/
        log "${PACKAGE} will be updated. (${LOCALVER}-${LOCALREL} -> ${AURVER}-${AURREL})"
    fi

    cd ${BUILDDIR}
}

reporemove() {
    if [ -f "${PACKAGEDIR}/${REPONAME}${DBEXT}" ]; then
        repo-remove "${PACKAGEDIR}/${REPONAME}${DBEXT}" "${1}"
    fi
}

repoadd() {
    repo-add "${PACKAGEDIR}/${REPONAME}${DBEXT}" "${1}"
}

build() {
    if [ "${1}" != "nodiff" ]; then
        diff_pkg
    fi

    if [ ${REBUILD} -eq 1 ]; then
        reporemove ${PACKAGE}
        rm -f ${PACKAGEDIR}/${PACKAGE}-[0-9]*.pkg.tar.* # remove old file

        if [ -d "${BUILDDIR}/${PACKAGE}" ]; then
            cd ${BUILDDIR}/${PACKAGE}
            makepkg -f
            if [ $? -ne 0 ]; then
                log "(${PACKAGE}) Package build failed...skipping"
                REBUILD=0
            fi
            if [ -f *.pkg.tar.* ]; then
                mv *.pkg.tar.* ${PACKAGEDIR}/
            fi
        else
            log "(${PACKAGE}) Package not found...skipping"
            REBUILD=0
        fi
    fi

    cd ${PACKAGEDIR}
}

get_data() {
    if [ -f "${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO" ]; then
        # " =" to avoid misuse using the url tag.
        pkgver=`grep "^pkgver =" ${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO | cut -d "=" -f 2|cut -d " " -f 2`
        CARCH=`grep "^arch =" ${BUILDDIR}/${PACKAGE}/pkg/.PKGINFO | cut -d "=" -f 2|cut -d " " -f 2`
        return 0
    else
        return 1
    fi
}

show_help() {
cat << EOF
Usage: $(basename ${0})
$(basename ${0}) -b <package>

Config file example:

  REPONAME=my-repo
  GET_FROM_AUR=(
    package1=a
    package2=m
    package3=n
  )

Options:
a ... build always a new package
m ... only build a new package if the PKGBUILD in AUR changed
n ... ignore package (useful if the package at AUR is currently broken)
EOF
}


if [ "${1}" = "-h" ]; then
    show_help
    exit 1
fi

# Check given path and show help
if [ ! -f "${REPOCONF}" ]; then
    echo "No config found."
    show_help
    exit 1
fi

# Include the configuration
source ${REPOCONF}
log "---> Starting build, using ${REPOCONF}"

log "---> Repo: ${REPONAME}"

BUILD_ONE=0
if [ "${1}" = "-b" ]; then
    if [ -n "${2}" ]; then
        PACKAGE=${2}
        BUILD_ONE=1
        shift 2
    else
        show_help
        exit 1
    fi
fi



cd ${BUILDDIR}
if [ $? -eq 1 ]; then
    die "Can't find build dir: ${BUILDDIR}"
fi

if [ ! -d "${BUILDDIR}/.cache" ]; then
    mkdir "${BUILDDIR}/.cache"
fi

# Include makepkg.conf for PKGEXT
source /etc/makepkg.conf
if [ "${PKGEXT}" = "" ]; then
    PKGEXT=".pkg.tar.gz"
fi

if [ ${BUILD_ONE} -eq 1 ]; then
    NO_DOWNLOAD=1
    if [ ! -d "${BUILDDIR}/${PACKAGE}" ]; then
        NO_DOWNLOAD=0
        download
    fi

    if [ ! -d "${BUILDDIR}/${PACKAGE}" ]; then
        die "(${PACKAGE}) Package not found...skipping."
    fi

    REBUILD=1
    build nodiff
    get_data
    if [ $? -eq 0 ]; then
        repoadd ${PACKAGE}-${pkgver}-${CARCH}${PKGEXT}
    fi

    exit 0
fi

if [ ${#GET_FROM_AUR[@]} -eq 0 ]; then
    die "Error in configuration or no packages specified."
fi


# Download package, check option, build it and add it to repository
for ITEM in "${GET_FROM_AUR[@]}"; do
    PACKAGE=$(echo ${ITEM} | cut -d "=" -f 1)
    PACKAGE_ACTION=$(echo ${ITEM} | cut -d "=" -f 2)
    REBUILD=0

    case ${PACKAGE_ACTION} in
        a)
            download
            REBUILD=1
            build
            get_data
            if [ $? -eq 0 ]; then
                repoadd ${PACKAGE}-${pkgver}-${CARCH}${PKGEXT}
                # clean up build dir (in -git packages)
                if [ -d "${BUILDDIR}/${PACKAGE}/src/*-build" ]; then
                    rm -rf ${BUILDDIR}/${PACKAGE}/src/*-build
                fi
            fi
            ;;
        m)
            download
            build
            if [ ${REBUILD} -eq 1 ]; then
                get_data
                if [ $? -eq 0 ]; then
                    rm -rf ${BUILDDIR}/${PACKAGE}/{src,pkg}
                    repoadd ${PACKAGE}-${pkgver}-${CARCH}${PKGEXT}
                fi
            fi
            ;;
        *)
            log "${PACKAGE} will be ignored."
            ;;
    esac
done

die "---> build finished."

#rm -rf .cache/*
